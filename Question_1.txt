/*Write a function:

class Solution { public int solution(int[] A); }

that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.

For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.

Given A = [1, 2, 3], the function should return 4.

Given A = [−1, −3], the function should return 1.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].

____________________________________________________________________________________________________
Attampt Date : 2nd June 2022 
Hetal Patel
onlinehet@gmail.com
(+1) 647 936 9867
https://www.linkedin.com/in/hetgammer/
_____________________________________________________________________________________________________*/

using System;
using System.Linq;

public class HetPositiveNumberTest
{
       public static void Main(string[] args)
        {
            int[] A = {-1,-3};
            Console.WriteLine("Given A = "+ string.Join(",", A));
            var s = new Solution();
            Console.WriteLine("Result is = "+s.solution(A));
            Console.ReadLine();
        }
    }
 
    class Solution
    {
        public int solution(int[] A)
        {
            var dataInA = A.Where(x => x > 0).Distinct().OrderBy(x => x).ToArray();
            if(dataInA.Count() == 0) return 1;
            int prev = 0;
            for(int i =0; i < dataInA.Count(); i++){
        
                if(dataInA[i] != prev + 1){
                    return prev + 1;
                }
                 prev = dataInA[i];
            }
            return dataInA.Last() + 1;
        }
}